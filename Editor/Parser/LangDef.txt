EBNF

definition         =
concatenation      ,
alternation        |
optional           [ ... ] - zero or one
repetition         { ... } - zero or more
grouping           ( ... )
terminal string    ' ... '
comment            (* ... *)
special sequence   ? ... ?
exception          -

String =        ? anything ?

BracketOpen =   '['
BracketClose =  ']'
Pipe =          '|'
Space =         ' '
Tab =           '\t'
Newline =       '\n'
Escape =        '\'
Dot =           '.'
QuestionMark =  '?'
Arrow =         '<'
Equal =         '='
Number =        '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

Decimal =       { Number } , Dot , Number , { Number }
Identity =      String - ( Whitespace | Dot | QuestionMark | Pipe | BracketClose )
Value =         Number | Decimal | ( String - ( Whitespace | Pipe | BracketClose ) )
Text =          String - ( Newline | BracketOpen )
Whitespace =    Space | Tab | Newline

ConcatAll = { CodeBlock | TextBlock | ConcatAll }

TextBlock = { Text | Newline }

CodeBlock = BracketOpen , ( EvalBlock | ExistsBlock | RangeBlock | EqualBlock ) , BracketClose

EvalBlock = IdentityBlock , [ ArgumentBlock ] , [ ResultBlock ]

ExistsBlock = IdentityBlock , QuestionMark , ResultBlock

RangeBlock = IdentityBlock , Arrow , ArgumentBlock , ResultBlock

EqualBlock = IdentityBlock , Equal , ArgumentBlock , ResultBlock

IdentityBlock = { Whitespace } , Identity , { Dot , Identity }

ArgumentBlock = { Whitespace , { Whitespace } , Value }

ResultBlock = { Whitespace } , { Pipe , ResultConcat }

ResultConcat = { CodeBlock | TextBlock | ResultConcat }


[pc.str] -> pc.str([],[])
[pc.str||] -> pc.str([],['',''])
[pc.str 3||] -> pc.str([3],['',''])
